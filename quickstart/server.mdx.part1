@SpringBootApplication
public class McpServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(McpServerApplication.class, args);
	}

	@Bean
	public ToolCallbackProvider weatherTools(WeatherService weatherService) {
		return MethodToolCallbackProvider.builder().toolObjects(weatherService).build();
	}
}
```

使用 `MethodToolCallbackProvider` 工具将 `@Tools` 转换为 MCP 服务器使用的可操作回调。

### 运行服务器

最后，让我们构建服务器：

```bash
./mvnw clean install
```

这将在 `target` 文件夹中生成一个 `mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar` 文件。

现在让我们使用现有的 MCP 宿主 Claude for Desktop 测试您的服务器。

## 使用 Claude for Desktop 测试服务器

<Note>
Claude for Desktop 尚未在 Linux 上提供。
</Note>

首先，确保您已安装 Claude for Desktop。
[您可以在这里安装最新版本](https://claude.ai/download)。如果您已经安装了 Claude for Desktop，**请确保它已更新到最新版本。**

我们需要为您想要使用的任何 MCP 服务器配置 Claude for Desktop。
为此，请在文本编辑器中打开您的 Claude for Desktop 应用程序配置，位于 `~/Library/Application Support/Claude/claude_desktop_config.json`。
确保创建该文件（如果不存在）。

例如，如果您已安装 [VS Code](https://code.visualstudio.com/)：

<Tabs>
  <Tab title="MacOS/Linux">
  ```bash
  code ~/Library/Application\ Support/Claude/claude_desktop_config.json
  ```
  </Tab>
  <Tab title="Windows">
  ```powershell
  code $env:AppData\Claude\claude_desktop_config.json
  ```
  </Tab>
</Tabs>

然后，您将在 `mcpServers` 键中添加您的服务器。
MCP UI 元素只有在至少有一个服务器正确配置时才会在 Claude for Desktop 中显示。

在这种情况下，我们将像这样添加我们的单个天气服务器：

<Tabs>
  <Tab title="MacOS/Linux">
  ```json java
  {
    "mcpServers": {
      "spring-ai-mcp-weather": {
        "command": "java",
        "args": [
          "-Dspring.ai.mcp.server.stdio=true",
          "-jar",
          "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
        ]
      }
    }
  }
  ```
  </Tab>

  <Tab title="Windows">
  ```json java
  {
    "mcpServers": {
      "spring-ai-mcp-weather": {
        "command": "java",
        "args": [
          "-Dspring.ai.mcp.server.transport=STDIO",
          "-jar",
          "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather\\mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
        ]
      }
    }
  }
  ```
  </Tab>
</Tabs>

<Note>
确保您传入服务器的绝对路径。
</Note>

这告诉 Claude for Desktop：
1. 有一个名为 "my-weather-server" 的 MCP 服务器
2. 通过运行 `java -jar /ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar` 启动它

保存文件，然后重启 **Claude for Desktop**。

## 使用 Java 客户端测试您的服务器

### 手动创建 MCP 客户端

使用 `McpClient` 连接到服务器：

```java
var stdioParams = ServerParameters.builder("java")
  .args("-jar", "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar")
  .build();

var stdioTransport = new StdioClientTransport(stdioParams);

var mcpClient = McpClient.sync(stdioTransport).build();

mcpClient.initialize();

ListToolsResult toolsList = mcpClient.listTools();

CallToolResult weather = mcpClient.callTool(
  new CallToolRequest("getWeatherForecastByLocation",
      Map.of("latitude", "47.6062", "longitude", "-122.3321")));

CallToolResult alert = mcpClient.callTool(
  new CallToolRequest("getAlerts", Map.of("state", "NY")));

mcpClient.closeGracefully();
```

### 使用 MCP 客户端引导启动器

创建一个新的引导启动器应用程序，使用 `spring-ai-mcp-client-spring-boot-starter` 依赖：

```xml
<dependency>
    <groupId>org.springframework.ai</groupId>
    <artifactId>spring-ai-mcp-client-spring-boot-starter</artifactId>
</dependency>
```

并将 `spring.ai.mcp.client.stdio.servers-configuration` 属性设置为指向您的 `claude_desktop_config.json`。
您可以重用现有的 Anthropic Desktop 配置：

```properties
spring.ai.mcp.client.stdio.servers-configuration=file:PATH/TO/claude_desktop_config.json
```

当您启动客户端应用程序时，自动配置将自动从 claude_desktop_config.json 创建 MCP 客户端。

有关更多信息，请参阅 [MCP 客户端引导启动器](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-client-docs.html) 参考文档。

## 更多 Java MCP 服务器示例

[starter-webflux-server](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/weather/starter-webflux-server) 展示了如何使用 SSE 传输创建 MCP 服务器。
它展示了如何使用 Spring Boot 的自动配置功能定义和注册 MCP 工具、资源和提示。

</Tab>
</Tabs>
